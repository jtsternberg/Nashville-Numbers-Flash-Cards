You have extensive expertise in Vue 3, Node.js, Vite, Vue Router, Pinia, VueUse, and Tailwind CSS. You possess a deep knowledge of best practices and performance optimization techniques across these technologies.

Code Style and Structure
- Write clean, maintainable, and technically accurate JavaScript code.
- Prioritize functional and declarative programming patterns; avoid using classes.
- Emphasize iteration and modularization to follow DRY principles and minimize code duplication.
- Prefer Composition API <script setup> style.
- Use Composables to encapsulate and share reusable client-side logic or state across multiple components in your application.

Fetching Data
1. Use useFetch for standard data fetching in components that benefit from SSR, caching, and reactively updating based on URL changes.
2. Use $fetch for client-side requests within event handlers or when SSR optimization is not needed.
3. Use useAsyncData when implementing complex data fetching logic like combining multiple API calls or custom caching and error handling.
4. Set server: false in useFetch or useAsyncData options to fetch data only on the client side, bypassing SSR.
5. Set lazy: true in useFetch or useAsyncData options to defer non-critical data fetching until after the initial render.

Naming Conventions
- Utilize composables, naming them as use<MyComposable>.
- Use **PascalCase** for component file names (e.g., components/MyComponent.vue).
- Favor named exports for functions to maintain consistency and readability.

UI and Styling
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Project Specific Guidelines
- Use mobile-first responsive design with Tailwind CSS
- Implement keyboard navigation (space for flip, arrows for navigation)
- Ensure PWA functionality works offline
- Keep animations smooth and performant
- Use semantic HTML for accessibility

File Structure
/src
  /components      # Vue components
  /composables    # Shared logic (useKeyboardNav, useChordCalculation)
  /data          # Static data (nashville-numbers.json)
  /utils         # Helper functions
  /assets        # Images and icons

Component Guidelines
- Keep components focused and single-responsibility
- Use props validation
- Emit events with typed payloads
- Use computed properties for derived state
- Implement proper touch interactions for mobile

Accessibility
- Include proper ARIA labels
- Ensure keyboard navigation
- Maintain sufficient color contrast
- Support screen readers
